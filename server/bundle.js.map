{"version":3,"file":"bundle.js","sources":["../src/server/db.ts","../src/server/helpers/roleNameToId.ts","../src/server/helpers/auth.ts","../src/server/routes/roles.ts","../src/server/routes/courses.ts","../src/server/index.ts"],"sourcesContent":["/**\r\n * NEW THINGS IN THIS FILE\r\n * Arrow Functions: \"(parameters) => {code}\"\r\n * - these act just like function() {} except it doesn't create a new scope. \r\n *   This means we can use this.whatever to reference class properties\r\n * Type annotations: \"let thing: number = 4\"\r\n * - these are what give typescript its name. The \": number\" tells the editor that thing is a number, and when we do \"thing.\" in the editor\r\n *   we'll get a list of autocompletion options that apply to the \"number\" type.\r\n *   Many are implicit (such as when assigning something immediately) but if you plan to assign it something later it should be annotated if possible.\r\n *   Technically, you can use \"any\" as the type to circumvent these features, but most of the time things should be annotated with types when it makes\r\n *   sense to do so.\r\n * promise-based functions: async/await\r\n * - these allow the program to wait at a point for some asynchronous code to execute before continuing, allowing things like\r\n *   sql queries to complete before moving on.\r\n * */\r\nimport * as mysql from \"mysql2/promise\"; // allows us to use async/await with mysql calls\r\n\r\nexport default class DatabaseHandler {\r\n    private pool: mysql.Pool;\r\n    constructor() {\r\n        this.pool = mysql.createPool({\r\n            connectionLimit: 25,\r\n            host: 'localhost',\r\n            user: 'mypls',\r\n            password: 'mypls123', // 'YOUR_PASSWORD_HERE',\r\n            database: 'mypls'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * logs the role of the specified username to the console\r\n     * @param username name of user to get role of \r\n     */\r\n    async displayRole(username: string) {\r\n        const query = \"SELECT role_name FROM roles WHERE idRoles IN (SELECT Roles_idRoles FROM user WHERE username = ?)\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]);\r\n        const data = JSON.stringify(result);\r\n        console.log(result[0]['role_name']);\r\n        connection.release();\r\n    }\r\n\r\n    /**\r\n     * Gets the ID of a user to be used in other functions\r\n     * @param username Name of user to fetch ID\r\n     * @returns ID of User\r\n     */\r\n    async getUserId(username: string) {\r\n        const query = \"SELECT idUser FROM user WHERE username = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]);\r\n        connection.release();\r\n        return result[0][\"idUser\"];\r\n    }\r\n\r\n    /**\r\n     * Gets the id of a group to be used in other functions\r\n     * @param title name of group to get id for\r\n     * @returns id of gorup\r\n     */\r\n    async getGroupId(title: string) {\r\n        const query = \"SELECT idGroup From group WHERE Name = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [title]);\r\n        connection.release();\r\n        return result[0]['idGroup'];\r\n    }\r\n\r\n    /**\r\n     * Checks if a username already exists in the database. If so, return an error. Otherwise, create the new user\r\n     * @param username the username to get\r\n     */\r\n    async checkNewUser(username: string) {\r\n        const query = \"SELECT username FROM user WHERE username = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of users in the database\r\n     * @returns list of users in the database\r\n     */\r\n    async getUsers() {\r\n        const query = \"SELECT * FROM user\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of *all* courses in the database\r\n     * @returns Array of courses in database\r\n     */\r\n    async getCourses() {\r\n        const query = \"SELECT * FROM courses\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of *all* groups in the database\r\n     * @returns Array of groups that exist in the database\r\n     */\r\n    async getGroups() {\r\n        const query = \"SELECT * FROM `group`\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of all discussions in the database\r\n     * @returns Array of discussions\r\n     */\r\n    async getDiscussions() {\r\n        const query = \"select * from discussions\"\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get all posts within the database\r\n     * @returns Array of posts\r\n     */\r\n    async getPosts() {\r\n        const query = \"SELECT * FROM post\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new user into the user table with their provided information\r\n     * called after checking if they already exist\r\n     * @param username new user's username\r\n     * @param password new user's password\r\n     * @param roleId roleID of new user\r\n     * @param firstName first name of user\r\n     * @param lastName last name of user\r\n     * @param email email of user\r\n     * @returns true if successful, false if an error occurs\r\n     */\r\n    async addUser(username: string, password: string, roleId: number, firstName: string, lastName: string, email: string) {\r\n        if (!(await this.checkNewUser(username))) {\r\n            const query = \"INSERT INTO user (username, password, Roles_idRoles,FirstName,LastName,Email) VALUES(?, ?, ?,?,?,?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [username, password, roleId, firstName, lastName, email]);\r\n            console.log(`inserted new user: ${username}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(\"user already exists!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a user from the users table given their username\r\n     * @param username name of user to delete\r\n     */\r\n    async deleteUser(username: string) {\r\n        if (await this.checkNewUser(username)) {\r\n            const query = \"DELETE FROM user WHERE username = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            await connection.query(query, [username]);\r\n            console.log(`deleted user: ${username}`)\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`user ${username} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if course already exists in database\r\n     * @param coursename name of course to check database for\r\n     * @returns the results of the check\r\n     */\r\n    async checkNewCourse(coursename: string) {\r\n        const query = \"SELECT coursename FROM courses WHERE coursename = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [coursename]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a course from the courses table given coursename\r\n     * @param coursename \r\n     */\r\n\r\n    // FIXME: handle \"User_idUser\" field\r\n    async addCourse(coursename: string, courseCode: string) {\r\n        if (!(await this.checkNewCourse(coursename))) {\r\n            const query = \"INSERT INTO courses (coursename,courseCode) VALUES(?,?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [coursename, courseCode]);\r\n            console.log(`inserted new course: ${coursename}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(\"Course already exists!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a course from the courses table given coursename\r\n     * @param coursename name of course to delete\r\n     * @returns true if successful, false if an error occurs\r\n     */\r\n\r\n    async deleteCourse(coursename: string) {\r\n        if (await this.checkNewCourse(coursename)) {\r\n            const query = \"DELETE FROM courses WHERE coursename = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            await connection.query(query, [coursename]);\r\n            console.log(`Deleted course: ${coursename}`)\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`Course ${coursename} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update course name \r\n     * @param coursename course to be modified\r\n     * @param newCourseName name to replace with\r\n     * @returns true if changed, false if error\r\n     */\r\n    async updateCourseName(coursename: string, newCourseName: string) {\r\n        if (await this.checkNewCourse(coursename)) {\r\n            const query = \"UPDATE courses SET coursename = ? WHERE coursename = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [newCourseName, coursename]);\r\n            console.log(`Updated course: ${coursename}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`Course ${coursename} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the instructor for a course\r\n     * @param coursename name to modify course instructor\r\n     * @param instructor name of instructor \r\n     * @returns true if successful, false if an error occurs\r\n     * \r\n     * NEED TO REWORK so it gets instructor ID then assign it to course\r\n     */\r\n    async updateCourseInstructor(coursename: string, instructor: string) {\r\n        if (await this.checkNewCourse(coursename)) {\r\n            const query = \"UPDATE courses SET instructor = ? WHERE coursename = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [instructor, coursename]);\r\n            console.log(`Updated course: ${coursename}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`Course ${coursename} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if discussion group already exists when creating a group\r\n     * @param name name of discussion group to check\r\n     * @returns length of result array\r\n     */\r\n    async checkDiscussionGroup(name: string) {\r\n        const query = \"SELECT Name FROM MyPLS.group WHERE name = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [name]) as any;\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of a discussion based on the title\r\n     * @param groupTitle title of discussion topic\r\n     * @returns id of topic \r\n     */\r\n    async getDiscussionId(groupTitle: string) {\r\n        const query = \"SELECT idDiscussions FROM discussions WHERE Discussion_Title = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [groupTitle]);\r\n        return result[0]['idDiscussions'];\r\n    }\r\n\r\n    /**\r\n     * Creates a discussion within a discussion group\r\n     * @param discussionTitle name of discussion topic \r\n     * @param summary summary of disucssion topic\r\n     * @param groupName name of group the discussion is associated with\r\n     * @returns true if successful, false if error\r\n     */\r\n    async createDiscussion(discussionTitle: string, summary: string, groupName: string) {\r\n        const groupId = await this.getGroupId(groupName);\r\n        const query = \"INSERT INTO Discussions (Discussion_Title,Summary,Group_idGroup) VALUES (?,?,?);\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [discussionTitle, summary, groupId]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Create a new discussion group\r\n     * @param name Name of group to be created\r\n     * @param description optional description to be inserted\r\n     * @returns true if successful, false if error occurs\r\n     */\r\n    async createDiscussionGroup(name: string, description: string) {\r\n        if (!(await this.checkDiscussionGroup(name))) {\r\n            const query = \"INSERT INTO MyPLS.Group (Name, Description) VALUES (?,?);\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [name, description]);\r\n            console.log(\"Created discussion group!\");\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else {\r\n            console.log(`Discussion group ${name} exists`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Searches for discussion given parameter\r\n     * @param keywords keyword to query database with\r\n     * @returns list of results from the db\r\n     */\r\n    async searchDiscussion(keywords: string) {\r\n        const query = \"SELECT * FROM discussions WHERE Discussion_Title LIKE '?'\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [keywords]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Add a user of any kind to a group\r\n     * @param username name of user to add to group\r\n     * @param group name of group to add user to\r\n     * @returns true if user is added, false if error\r\n     */\r\n    async addUserToDiscussion(username: string, group: string) {\r\n        if (this.checkDiscussionGroup(group)) {\r\n            const userId = await this.getUserId(username);\r\n            const groupId = await this.getGroupId(group);\r\n            const query = \"INSERT INTO MemberList (Group_idGroup, User_idUser) VALUES (?,?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [userId, groupId]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else {\r\n            console.log(`Group ${group} doest not exist`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Remove a user from a discussion group\r\n     * @param username name of user to remove\r\n     * @param group what group to remove user from\r\n     * @returns true if user is sucessfully removed, false if error\r\n     */\r\n    async removeStudentFromDiscussion(username: string, group: string) {\r\n        if (this.checkDiscussionGroup(group)) {\r\n            const userId = await this.getUserId(username);\r\n            const groupId = await this.getGroupId(group);\r\n            const query = \"DELETE FROM MemberList WHERE User_idUser = ? AND Group_idGroup = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [userId, groupId]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else {\r\n            console.log(`Group ${group} does not exist`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a disucssion post under a discussion group given the proper parameters\r\n     * @param title title of post \r\n     * @param content content of post\r\n     * @param discussionTitle title of discussion this post falls under\r\n     * @param username name of user creating post\r\n     * @returns true if successful, false if not\r\n     */\r\n    async createDiscussionPost(title: string, content: string, discussionTitle: string, username: string) {\r\n        const discussionId = await this.getDiscussionId(discussionTitle);\r\n        const userId = await this.getUserId(username);\r\n        const query = \"INSERT INTO Post (Title, Content, Discussions_idDiscussions, User_idUser) VALUES (?, ?, ?, ?)\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [title, content, discussionId, userId]);\r\n        connection.release();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets discussion posts in a discussion group given the discussion title\r\n     * @param discussionTitle title of discussion to pull up posts for\r\n     * @returns result array containing post title,content, and username of posts \r\n     */\r\n    async getDiscussionPosts(discussionTitle: string) {\r\n        const query = \"SELECT P.title, P.content, U.username FROM Post P INNER JOIN user U ON P.User_idUser = U.idUser WHERE discussions_idDiscussions = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [discussionTitle]);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Rate a specified user with a number and any additional comments\r\n     * @param userRated name of user to be rated\r\n     * @param rating number specifying rating\r\n     * @param comment any additional comments a user has to make on that person\r\n     * @returns true if successful, false if error\r\n     */\r\n    async rateUser(userRated: string, rating: number, comment: string) {\r\n        const userId = await this.getUserId(userRated);\r\n        const query = \"INSERT INTO Ratings (User_idUser, ratingNumber, Comment) VALUES (?, ?, ?)\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [userId, rating, comment]);\r\n        connection.release();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the ratings of a user based on the username provided\r\n     * @param username name of user to fetch ratings for\r\n     * @returns array containing score and comments of specified user\r\n     */\r\n    async getRatings(username: string) {\r\n        const query = \"SELECT R.ratingNumber, R.Comment FROM ratings R INNER JOIN user U ON R.User_idUser = U.idUser WHERE U.username = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    async getRoles() {\r\n        const query = \"SELECT * FROM roles\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n}\r\n","export default (name: string) => {\r\n  switch (name) {\r\n    case \"administrator\":\r\n      return 1;\r\n    case \"instructor\":\r\n    case \"inst\":\r\n    case \"professor\":\r\n    case \"prof\":\r\n      return 2;\r\n    case \"learner\":\r\n    case \"student\":\r\n    case \"stu\":\r\n      return 3;\r\n    default:\r\n      return -1;\r\n  }\r\n}","// TODO: account for other roles\r\nexport default (req, res, next) => {\r\n  if (req.session[\"role\"] == \"admin\") return next();\r\n  else {\r\n    res.status(403);\r\n    res.redirect(\"/login\");\r\n    return;\r\n  }\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth from '../helpers/auth';\r\n\r\nexport const roleRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/roles\")\r\n    .get(auth, async (req, res) => {\r\n      res.send(await DB.getRoles()).end();\r\n    })\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth from '../helpers/auth';\r\n\r\nexport const courseRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/courses\")\r\n  .get(auth, async (req, res) => {\r\n    return res.send(await DB.getCourses()).end();\r\n  })\r\n  .post(auth, async (req, res) => {\r\n    const { coursename, courseCode } = req.body;\r\n    await DB.addCourse(coursename, courseCode);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n  .delete(auth, async (req, res) => {\r\n    const { coursename } = req.body;\r\n    await DB.deleteCourse(coursename);\r\n    res.redirect(\".\");\r\n  })\r\n  .patch(auth, async (req, res) => {\r\n    const { newCoursename, oldCoursename } = req.body;\r\n    await DB.updateCourseName(newCoursename, oldCoursename);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n}","import sirv from \"sirv\";\r\nimport express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nimport session from \"express-session\";\r\nimport DatabaseHandler from \"./db\";\r\nimport roleNameToId from \"./helpers/roleNameToId\";\r\nimport auth from \"./helpers/auth\";\r\nimport { roleRoutes } from \"./routes/roles\";\r\nimport { courseRoutes } from \"./routes/courses\";\r\n\r\nconst DB = new DatabaseHandler();\r\n\r\nconst app = express();\r\n\r\napp.use(session({\r\n  secret: \"lightbulb\", \r\n  cookie: { maxAge: 3600000 },\r\n  saveUninitialized: true,\r\n  resave: true\r\n}))\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// this is how you'd go about creating new API endpoints and\r\n// sending data back to the client\r\n// more documentation here: http://expressjs.com/en/guide/routing.html#route-handlers\r\napp.route(\"/users\")\r\n  .get(auth, async (req, res) => {\r\n    return res.send(await DB.getUsers()).end();\r\n  })\r\n  .post(async (req, res) => {\r\n    const {username, password, role, FirstName, LastName, Email} = req.body;\r\n    console.log(req.body);\r\n    await DB.addUser(username, password, roleNameToId(role), FirstName, LastName, Email);\r\n    if (req.session[\"role\"] == \"admin\") {\r\n      res.redirect(\".\");\r\n    } else {\r\n      res.redirect(\"/login\");\r\n    }\r\n  })\r\n  .delete(auth, async (req, res) => {\r\n    console.log(req.body);\r\n    const {username} = req.body;\r\n    await DB.deleteUser(username);\r\n    res.redirect(\"/index\");\r\n  })\r\n  .patch(auth, async (req, res) => {\r\n    const { oldUsername, username, FirstName, LastName, Roles_idRoles, Email } = req.body;\r\n    console.log(\"this is where updateUser method(s) would go\");\r\n    console.log(\"this may help implement it: https://stackoverflow.com/questions/25683760/how-to-dynamically-generate-mysql-update-statement-based-on-defined-variables-fr\");\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n\r\napp.get(\"/admin\", auth)\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n  const { psw, uname } = req.body;\r\n  const users = await DB.getUsers();\r\n  for (const user of users as any) {\r\n    if (user.password == psw && user.username == uname) {\r\n      switch(user.Roles_idRoles) {\r\n        case 1:\r\n          req.session[\"role\"] = \"admin\";\r\n          res.redirect(\"/admin\");\r\n          break;\r\n        default:\r\n          res.redirect(\"/index\");\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\napp.route(\"/groups\")\r\n  .post(auth, async (req, res) => {\r\n    const { Name, Description } = req.body;\r\n    await DB.createDiscussionGroup(Name, Description);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n  .delete(auth, async (req, res) => {\r\n    const { Name } = req.body;\r\n    console.log(\"this is where the removeDiscussionGroup method would go\");\r\n    res.redirect(\".\");\r\n  })\r\n  .get(auth, async (req, res) => {\r\n    return res.send(await DB.getGroups()).end();\r\n  })\r\n  .patch(auth, async (req, res) => {\r\n    const { newGroupName, oldGroupName } = req.body;\r\n    console.log(\"this is where the updateGroupName method would go\");\r\n    // await DB.updateGroupName(newGroupName, oldGroupName);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n\r\ncourseRoutes(app, DB);\r\nroleRoutes(app, DB);\r\n\r\n// app.route(\"/discussions\")\r\n//   .get(auth, async (req, res) => {\r\n//     return res.send(await DB.getDiscussions()).end();\r\n//   })\r\n//   .post(auth, async (req, res) => {\r\n//     const { title } = req.body;\r\n//     await DB.addDiscussion(title);\r\n//     res.redirect(\"/admin\");\r\n//   })\r\n\r\napp.post(\"/linkUserToSomething\", auth, (req, res) => {\r\n  // TODO: implement this lmao\r\n  res.redirect(\"/admin\");\r\n})\r\n// loads the static assets (index.html, login.html, etc) for us\r\nconst assets = sirv('public', {extensions:['html', 'htm', \".map\"]});\r\napp.use(assets);\r\n\r\napp.listen(5000, () => {\r\n  console.log(\"ready on https://localhost:5000\");\r\n})\r\n"],"names":["mysql.createPool","express","session","bodyParser","sirv"],"mappings":"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"}