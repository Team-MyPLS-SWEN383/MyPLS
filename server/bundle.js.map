{"version":3,"file":"bundle.js","sources":["../src/server/db.ts","../src/server/helpers/roleNameToId.ts","../src/server/helpers/auth.ts","../src/server/routes/roles.ts","../src/server/routes/courses.ts","../src/server/helpers/dateToMySql.ts","../src/server/routes/lectures.ts","../src/server/routes/content.ts","../src/server/routes/quizzes.ts","../src/server/index.ts"],"sourcesContent":["/**\r\n * NEW THINGS IN THIS FILE\r\n * Arrow Functions: \"(parameters) => {code}\"\r\n * - these act just like function() {} except it doesn't create a new scope. \r\n *   This means we can use this.whatever to reference class properties\r\n * Type annotations: \"let thing: number = 4\"\r\n * - these are what give typescript its name. The \": number\" tells the editor that thing is a number, and when we do \"thing.\" in the editor\r\n *   we'll get a list of autocompletion options that apply to the \"number\" type.\r\n *   Many are implicit (such as when assigning something immediately) but if you plan to assign it something later it should be annotated if possible.\r\n *   Technically, you can use \"any\" as the type to circumvent these features, but most of the time things should be annotated with types when it makes\r\n *   sense to do so.\r\n * promise-based functions: async/await\r\n * - these allow the program to wait at a point for some asynchronous code to execute before continuing, allowing things like\r\n *   sql queries to complete before moving on.\r\n * */\r\nimport * as mysql from \"mysql2/promise\"; // allows us to use async/await with mysql calls\r\n\r\nexport default class DatabaseHandler {\r\n    private pool: mysql.Pool;\r\n    constructor() {\r\n        this.pool = mysql.createPool({\r\n            connectionLimit: 25,\r\n            host: 'localhost',\r\n            user: 'mypls',\r\n            password: 'mypls123', // 'YOUR_PASSWORD_HERE',\r\n            database: 'mypls'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * logs the role of the specified username to the console\r\n     * @param username name of user to get role of \r\n     */\r\n    async displayRole(username: string) {\r\n        const query = \"SELECT role_name FROM roles WHERE idRoles IN (SELECT Roles_idRoles FROM user WHERE username = ?)\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]);\r\n        const data = JSON.stringify(result);\r\n        console.log(result[0]['role_name']);\r\n        connection.release();\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Gets the ID of a user to be used in other functions\r\n     * @param username Name of user to fetch ID\r\n     * @returns ID of User\r\n     */\r\n    async getUserId(username: string) {\r\n        const query = \"SELECT idUser FROM user WHERE username = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]);\r\n        connection.release();\r\n        return result[0][\"idUser\"];\r\n    }\r\n\r\n    /**\r\n     * Gets the id of a group to be used in other functions\r\n     * @param title name of group to get id for\r\n     * @returns id of gorup\r\n     */\r\n    async getGroupId(title: string) {\r\n        const query = \"SELECT idGroup From group WHERE Name = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [title]);\r\n        connection.release();\r\n        return result[0]['idGroup'];\r\n    }\r\n\r\n    /**\r\n     * Checks if a username already exists in the database. If so, return an error. Otherwise, create the new user\r\n     * @param username the username to get\r\n     */\r\n    async checkNewUser(username: string) {\r\n        const query = \"SELECT username FROM user WHERE username = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of users in the database\r\n     * @returns list of users in the database\r\n     */\r\n    async getUsers() {\r\n        const query = \"SELECT * FROM user\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of *all* courses in the database\r\n     * @returns Array of courses in database\r\n     */\r\n    async getCourses() {\r\n        const query = \"SELECT * FROM courses\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of *all* groups in the database\r\n     * @returns Array of groups that exist in the database\r\n     */\r\n    async getGroups() {\r\n        const query = \"SELECT * FROM `group`\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get list of all discussions in the database\r\n     * @returns Array of discussions\r\n     */\r\n    async getDiscussions() {\r\n        const query = \"select * from discussions\"\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to get all posts within the database\r\n     * @returns Array of posts\r\n     */\r\n    async getPosts(){\r\n        const query = \"SELECT * FROM post\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new user into the user table with their provided information\r\n     * called after checking if they already exist\r\n     * @param username new user's username\r\n     * @param password new user's password\r\n     * @param roleId roleID of new user\r\n     * @param firstName first name of user\r\n     * @param lastName last name of user\r\n     * @param email email of user\r\n     * @returns true if successful, false if an error occurs\r\n     */\r\n    async addUser(username: string, password: string, roleId: number, firstName: string, lastName: string, email: string) {\r\n        if (!(await this.checkNewUser(username))) {\r\n            const query = \"INSERT INTO user (username, password, Roles_idRoles,FirstName,LastName,Email) VALUES(?, ?, ?,?,?,?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [username, password, roleId, firstName, lastName, email]);\r\n            console.log(`inserted new user: ${username}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(\"user already exists!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update an existing user's first name\r\n     * @param username name of user to be modified\r\n     * @param firstName new first name for user\r\n     * @returns true on success, false if user does not exist\r\n     */\r\n    async updateUserFirstName(username: string, firstName: string){\r\n        if(await this.checkNewUser(username)){\r\n            const query = \"UPDATE user SET FirstName = ? WHERE username = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[username,firstName]);\r\n            console.log(`Updated first name for: ${username}`);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        console.log(`user: ${username} does not exist`);\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * Update an existing user's last name\r\n     * @param username name of user to be modified\r\n     * @param lastName new last name for user\r\n     * @returns true on success, false if user does not exist\r\n     */\r\n    async updateUserLastName(username: string, lastName: string){\r\n        if(await this.checkNewUser(username)){\r\n            const query = \"UPDATE user SET LastName = ? WHERE username = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[username,lastName]);\r\n            console.log(`Updated last name for: ${username}`);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        console.log(`user: ${username} does not exist`);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Update an existing user's email\r\n     * @param username name of user to be modified\r\n     * @param email new email for user\r\n     * @returns true on success, false if user does not exist\r\n     */\r\n    async updateUserEmail(username: string, email: string){\r\n        if(await this.checkNewUser(username)){\r\n            const query = \"UPDATE user SET Email = ? WHERE username = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[username,email]);\r\n            console.log(`Updated email for: ${username}`);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        console.log(`user: ${username} does not exist`);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Update an existing user's password\r\n     * @param username name of user to be modified\r\n     * @param password new password for user\r\n     * @returns true on success, false if user does not exist\r\n     */\r\n    async updateUserPassword(username: string, password: string){\r\n        if(await this.checkNewUser(username)){\r\n            const query = \"UPDATE user SET password = ? WHERE username = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[username,password]);\r\n            console.log(`Updated password for: ${username}`);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        console.log(`user: ${username} does not exist`);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a user from the users table given their username\r\n     * @param username name of user to delete\r\n     */\r\n    async deleteUser(username: string) {\r\n        if (await this.checkNewUser(username)) {\r\n            const query = \"DELETE FROM user WHERE username = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            await connection.query(query, [username]);\r\n            console.log(`deleted user: ${username}`)\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`user ${username} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if course code already exists in database\r\n     * @param courseCode Code of course to check database for\r\n     * @returns the results of the check\r\n     */\r\n    async checkNewCourse(courseCode: string) {\r\n        const query = \"SELECT courseCode FROM courses WHERE courseCode = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [courseCode]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if course name exists in the database\r\n     * @param coursename name of course to search for\r\n     * @returns results of the check\r\n     */\r\n    async checkCourseName(coursename:string){\r\n        const query = \"SELECT coursename FROM courses WHERE coursename = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const[result] = await connection.query(query,[coursename]) as any[];\r\n        connection.release();\r\n        return result.legth > 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a course from the courses table given coursename\r\n     * @param coursename \r\n     * @param courseCode\r\n     * @param username\r\n     * @returns true if successful, false if course already exists\r\n     */\r\n\r\n    // FIXME: handle \"User_idUser\" field\r\n    async addCourse(coursename: string, courseCode: string, username: string) {\r\n        if (!(await this.checkNewCourse(courseCode))) {\r\n            const userId = await this.getUserId(username);\r\n            const query = \"INSERT INTO courses (coursename,courseCode,User_idUser) VALUES(?,?,?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [coursename, courseCode, userId]);\r\n            console.log(`inserted new course: ${coursename}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(\"Course already exists!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async getCourseId(coursename: string) {\r\n        const query = \"SELECT idCourse from courses WHERE coursename = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [coursename]);\r\n        connection.release();\r\n        return result[0][\"idCourse\"];\r\n    }\r\n\r\n    /**\r\n     * Deletes a course from the courses table given coursename\r\n     * @param coursename name of course to delete\r\n     * @returns true if successful, false if an error occurs\r\n     */\r\n\r\n    async deleteCourse(courseCode: string) {\r\n        if (await this.checkNewCourse(courseCode)) {\r\n            const query = \"DELETE FROM courses WHERE courseCode = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            await connection.query(query, [courseCode]);\r\n            console.log(`Deleted course: ${courseCode}`)\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`Course ${courseCode} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update course name \r\n     * @param coursename course to be modified\r\n     * @param newCourseName name to replace with\r\n     * @returns true if changed, false if error\r\n     */\r\n    async updateCourseName(coursename: string, newCourseName: string) {\r\n        if (await this.checkCourseName(coursename)) {\r\n            const query = \"UPDATE courses SET coursename = ? WHERE coursename = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [newCourseName, coursename]);\r\n            console.log(`Updated course: ${coursename}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`Course ${coursename} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the instructor for a course\r\n     * @param coursename code to modify course instructor\r\n     * @param instructor name of instructor \r\n     * @returns true if successful, false if an error occurs\r\n     * \r\n     * NEED TO REWORK so it gets instructor ID then assign it to course\r\n     */\r\n    async updateCourseInstructor(courseCode: string, instructor: string) {\r\n        if (await this.checkNewCourse(courseCode)) {\r\n            const instructorId = await this.getUserId(instructor);\r\n            const query = \"UPDATE courses SET User_idUser = ? WHERE courseCode = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [instructorId, courseCode]);\r\n            console.log(`Updated course: ${courseCode}`);\r\n            connection.release();\r\n            return true;\r\n        } else {\r\n            console.log(`Course ${courseCode} doesn't exist!`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if discussion group already exists when creating a group\r\n     * @param name name of discussion group to check\r\n     * @returns length of result array\r\n     */\r\n    async checkDiscussionGroup(name: string){\r\n        const query = \"SELECT Name FROM MyPLS.group WHERE name = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[name]) as any;\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of a discussion based on the title\r\n     * @param groupTitle title of discussion topic\r\n     * @returns id of topic \r\n     */\r\n    async getDiscussionId(groupTitle: string){\r\n        const query = \"SELECT idDiscussions FROM discussions WHERE Discussion_Title = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[groupTitle]);\r\n        connection.release();\r\n        return result[0]['idDiscussions'];\r\n    }\r\n\r\n    /**\r\n     * Creates a discussion within a discussion group\r\n     * @param discussionTitle name of discussion topic \r\n     * @param summary summary of disucssion topic\r\n     * @param groupName name of group the discussion is associated with\r\n     * @returns true if successful, false if error\r\n     */\r\n    async createDiscussion(discussionTitle: string, summary: string, groupName: string){\r\n        const groupId = await this.getGroupId(groupName);\r\n        const query = \"INSERT INTO Discussions (Discussion_Title,Summary,Group_idGroup) VALUES (?,?,?);\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[discussionTitle,summary,groupId]);\r\n        connection.release();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Create a new discussion group\r\n     * @param name Name of group to be created\r\n     * @param description optional description to be inserted\r\n     * @returns true if successful, false if error occurs\r\n     */\r\n    async createDiscussionGroup(name: string, description: string) {\r\n        if (!(await this.checkDiscussionGroup(name))) {\r\n            const query = \"INSERT INTO MyPLS.Group (Name, Description) VALUES (?,?);\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query, [name, description]);\r\n            console.log(\"Created discussion group!\");\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else {\r\n            console.log(`Discussion group ${name} exists`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Deletes a discussion group based on given name\r\n     * @param name name of group to be deleted\r\n     * @returns true if successful, false if group does not exist\r\n     */\r\n    async deleteGroup(name: string){\r\n        if(await this.checkDiscussionGroup(name)){\r\n            const query = \"DELETE FROM mypls.group WHERE name = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[name]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Group ${name} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an existing group name\r\n     * @param currentName name of group to be modified\r\n     * @param newName new name to replace it\r\n     * @returns true if successful, false if current name does not exist or new name is already taken\r\n     */\r\n    async updateGroupName(currentName: string, newName: string){\r\n        if( await this.checkDiscussionGroup(currentName) && ! await this.checkDiscussionGroup(newName)){\r\n            const query = \"UPDATE mypls.group SET Name = ? WHERE Name = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[newName,currentName]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Group ${newName} already exists in database`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches for discussion given parameter\r\n     * @param keywords keyword to query database with\r\n     * @returns list of results from the db\r\n     */\r\n    async searchDiscussion(keywords: string) {\r\n        const query = \"SELECT * FROM discussions WHERE Discussion_Title LIKE '?'\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [keywords]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Add a user of any kind to a group\r\n     * @param username name of user to add to group\r\n     * @param group name of group to add user to\r\n     * @returns true if user is added, false if error\r\n     */\r\n    async addUserToDiscussion(username: string, group: string) {\r\n        if (this.checkDiscussionGroup(group)) {\r\n            const userId = await this.getUserId(username);\r\n            const groupId = await this.getGroupId(group);\r\n            const query = \"INSERT INTO MemberList (Group_idGroup, User_idUser) VALUES (?,?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[userId,groupId]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Group ${group} doest not exist`);\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Remove a user from a discussion group\r\n     * @param username name of user to remove\r\n     * @param group what group to remove user from\r\n     * @returns true if user is sucessfully removed, false if error\r\n     */\r\n    async removeStudentFromDiscussion(username: string, group: string){\r\n        if(this.checkDiscussionGroup(group)){\r\n            const userId = await this.getUserId(username);\r\n            const groupId = await this.getGroupId(group);\r\n            const query = \"DELETE FROM MemberList WHERE User_idUser = ? AND Group_idGroup = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[userId,groupId]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Group ${group} does not exist`);\r\n            return false;\r\n        }\r\n        \r\n    }    \r\n\r\n    /**\r\n     * Creates a disucssion post under a discussion group given the proper parameters\r\n     * @param title title of post \r\n     * @param content content of post\r\n     * @param discussionTitle title of discussion this post falls under\r\n     * @param username name of user creating post\r\n     * @returns true if successful, false if not\r\n     */\r\n    async createDiscussionPost(title: string, content: string, discussionTitle: string, username: string){\r\n        const discussionId = await this.getDiscussionId(discussionTitle);\r\n        const userId = await this.getUserId(username);\r\n        const query = \"INSERT INTO Post (Title, Content, Discussions_idDiscussions, User_idUser) VALUES (?, ?, ?, ?)\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[title,content,discussionId,userId]);\r\n        connection.release();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets discussion posts in a discussion group given the discussion title\r\n     * @param discussionTitle title of discussion to pull up posts for\r\n     * @returns result array containing post title,content, and username of posts \r\n     */\r\n    async getDiscussionPosts(discussionTitle: string){\r\n        const query = \"SELECT P.title, P.content, U.username FROM Post P INNER JOIN user U ON P.User_idUser = U.idUser WHERE discussions_idDiscussions = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[discussionTitle]);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Rate a specified user with a number and any additional comments\r\n     * @param userRated name of user to be rated\r\n     * @param rating number specifying rating\r\n     * @param comment any additional comments a user has to make on that person\r\n     * @returns true if successful, false if error\r\n     */\r\n    async rateUser(userRated: string, rating: number, comment: string){\r\n        const userId = await this.getUserId(userRated);\r\n        const query = \"INSERT INTO Ratings (User_idUser, ratingNumber, Comment) VALUES (?, ?, ?)\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[userId,rating,comment]);\r\n        connection.release();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the ratings of a user based on the username provided\r\n     * @param username name of user to fetch ratings for\r\n     * @returns array containing score and comments of specified user\r\n     */\r\n    async getRatings(username: string) {\r\n        const query = \"SELECT R.ratingNumber, R.Comment FROM ratings R INNER JOIN user U ON R.User_idUser = U.idUser WHERE U.username = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [username]);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    async getRoles() {\r\n        const query = \"SELECT * FROM roles\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Lecture Statements\r\n     */\r\n\r\n    async getLectures() {\r\n        const query = \"SELECT * FROM Lecture\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    async getLectureId(lecturename: string) {\r\n        const query = \"SELECT idLecture from lecture WHERE title = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [lecturename]);\r\n        connection.release();\r\n        return result[0][\"idLecture\"];\r\n    }\r\n\r\n    async checkLecture(lectureTitle: string) {\r\n        const query = \"SELECT title FROM Lecture WHERE title=?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [lectureTitle]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    async checkCourse(courseCode: string){\r\n        const query = \"SELECT coursename FROM courses WHERE courseCode = ?\";  \r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query,[courseCode]);\r\n        return result;\r\n    }\r\n\r\n    async createLecture(lectureTitle: string, summary: string, unlockDate: string, courseID: number) {\r\n        if(this.checkLecture(lectureTitle)){\r\n            const query = \"INSERT INTO Lecture (title, summary, UnlockDate, Courses_idCourse) VALUES (?, ?, ?, ?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[lectureTitle, summary, unlockDate, courseID]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Lecture ${lectureTitle} exists`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async updateLecture(lectureTitle: string, summary: string, unlockDate: string, courseID: number) {\r\n        if(this.checkLecture(lectureTitle)){\r\n            const query = \"UPDATE Lecture SET (summary = ?, UnlockDate = ?, Courses_idCourse = ?) WHERE title = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[summary, unlockDate, courseID, lectureTitle]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Lecture ${lectureTitle} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async deleteLecture(lectureTitle: string,) {\r\n        if(this.checkLecture(lectureTitle)){\r\n            const query = \"DELETE FROM Lecture title = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[lectureTitle]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Lecture ${lectureTitle} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all lectures from a specific course\r\n     * @param courseCode course code to get lectures form\r\n     * @returns  list of lectures present in course\r\n     */\r\n    async getCourseLectures(courseCode: string){\r\n        if(this.checkCourse(courseCode)){\r\n            const query = \"SELECT * FROM lecture L INNER JOIN Courses C ON L.Courses_idCourse = C.idCourse WHERE C.courseCode = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[courseCode]);\r\n            connection.release();\r\n            return result;\r\n        } \r\n        else{\r\n            console.log(`Course ${courseCode} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the content of a specific lecture\r\n     * @param lectureTitle title of lecture to get content for\r\n     * @returns content of lecture\r\n     */\r\n    async getLectureContent(lectureTitle: string){\r\n        if(this.checkLecture(lectureTitle)){\r\n            const query = \"SELECT C.ContentLink FROM Content C INNER JOIN Lecture L ON L.idLecture = C.Lecture_idLecture;\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[lectureTitle]);\r\n            connection.release();\r\n            return result;\r\n        }\r\n        else{\r\n            console.log(`Error getting content: ${lectureTitle} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Quiz Statements\r\n     */\r\n\r\n     async getQuizzes() {\r\n        const query = \"SELECT * FROM Quiz\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n    async checkQuizzes(quizTitle: string) {\r\n        const query = \"SELECT Title FROM Quiz WHERE Title=?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [quizTitle]) as any[];\r\n        connection.release();\r\n        return result.length > 0;\r\n    }\r\n\r\n    async createQuiz(quizTitle: string, startTime: string, endTime: string, lectureID: number) {\r\n        if(this.checkQuizzes(quizTitle)){\r\n            const query = \"INSERT INTO Quiz (Title, StartTime, EndTime, Lecture_idLecture) VALUES (?, ?, ?, ?)\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[quizTitle, startTime, endTime, lectureID]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Quiz ${quizTitle} exists`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async updateQuiz(quizTitle: string, startTime: string, endTime: string) {\r\n        if(this.checkLecture(quizTitle)){\r\n            const query = \"UPDATE Quiz SET (summary = ?, StartTime = ?, EndTime = ?) WHERE Title = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[startTime, endTime, quizTitle]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Quiz ${quizTitle} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async deleteQuiz(quizTitle: string,) {\r\n        if(this.checkLecture(quizTitle)){\r\n            const query = \"DELETE FROM Quiz Title = ?\";\r\n            const connection = await this.pool.getConnection();\r\n            const [result] = await connection.query(query,[quizTitle]);\r\n            connection.release();\r\n            return true;\r\n        }\r\n        else{\r\n            console.log(`Quiz ${quizTitle} does not exist`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Student - See professor ratings\r\n     * @param instructor\r\n     */\r\n\r\n    async getInstructorID(instructor: string) {\r\n        const query = \"SELECT * FROM User WHERE Roles_idRoles = 2 AND FirstName = ? OR LastName = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [instructor, instructor]);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n     async getRating(instructor: string) {\r\n        var profID = this.getInstructorID(instructor);\r\n        const query = \"SELECT * FROM Ratings WHERE User_idUser = ?\";\r\n        const connection = await this.pool.getConnection();\r\n        const [result] = await connection.query(query, [profID]);\r\n        connection.release();\r\n        return result;\r\n    }\r\n\r\n}\r\n","export default (name: string) => {\r\n  switch (name) {\r\n    case \"administrator\":\r\n      return 1;\r\n    case \"instructor\":\r\n    case \"inst\":\r\n    case \"professor\":\r\n    case \"prof\":\r\n      return 2;\r\n    case \"learner\":\r\n    case \"student\":\r\n    case \"stu\":\r\n      return 3;\r\n    default:\r\n      return -1;\r\n  }\r\n}","// TODO: account for other roles\r\nexport default (req, res, next) => {\r\n  if (req.session[\"role\"] == \"admin\") return next();\r\n  else {\r\n    res.status(403);\r\n    res.redirect(\"/login\");\r\n    return;\r\n  }\r\n}\r\n\r\nexport const profAuth = (req, res, next) => {\r\n  if (req.session[\"role\"] == \"admin\") return next();\r\n  else if (req.session[\"role\"] == \"instructor\") return next();\r\n  else {\r\n    res.status(403);\r\n    res.redirect(\"/login\");\r\n    return;\r\n  }\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth from '../helpers/auth';\r\n\r\nexport const roleRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/roles\")\r\n    .get(auth, async (req, res) => {\r\n      res.send(await DB.getRoles()).end();\r\n    })\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth from '../helpers/auth';\r\n\r\nexport const courseRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/courses\")\r\n  .get(async (req, res) => {\r\n    return res.send(await DB.getCourses()).end();\r\n  })\r\n  .post(auth, async (req, res) => {\r\n    const { coursename, courseCode, username } = req.body;\r\n    await DB.addCourse(coursename, courseCode, username);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n  .delete(auth, async (req, res) => {\r\n    const { coursename } = req.body;\r\n    await DB.deleteCourse(coursename);\r\n    res.redirect(\".\");\r\n  })\r\n  .patch(auth, async (req, res) => {\r\n    const { newCoursename, oldCoursename } = req.body;\r\n    await DB.updateCourseName(newCoursename, oldCoursename);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n}\r\n\r\n","export const toMySqlDate = (date: Date) => {\r\n  return new Date(date).toISOString().slice(0, 19).replace('T', ' ');\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth, { profAuth } from '../helpers/auth';\r\nimport { toMySqlDate } from '../helpers/dateToMySql';\r\n\r\nexport const lectureRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/lectures\")\r\n  .get(async (req, res) => {\r\n    return res.send(await DB.getLectures()).end();\r\n  })\r\n  .post(profAuth, async (req, res) => {\r\n    const { title, summary, UnlockDate, coursename } = req.body;\r\n    await DB.createLecture(title, summary, toMySqlDate(UnlockDate), await DB.getCourseId(coursename));\r\n    res.status(200);\r\n    res.redirect(\"/instructor\");\r\n  })\r\n  .delete(profAuth, async (req, res) => {\r\n    const { title } = req.body;\r\n    await DB.deleteLecture(title);\r\n    res.redirect(\".\");\r\n  })\r\n  .patch(profAuth, async (req, res) => {\r\n    const { title, summary, UnlockDate, coursename } = req.body;\r\n    await DB.updateLecture(title, summary, toMySqlDate(UnlockDate), await DB.getCourseId(coursename));\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth, { profAuth } from '../helpers/auth';\r\n\r\nexport const contentRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/content\")\r\n  .get(async (req, res) => {\r\n    console.log(\"lecture content GET call\");\r\n    return res.redirect(\".\");\r\n    // return res.send(await DB.getLecture()).end();\r\n  })\r\n  .post(profAuth, async (req, res) => {\r\n    const { ContentLink, Lecture_idLecture } = req.body;\r\n    console.log(\"lecture content POST call\");\r\n    // await DB.createLecture(ContentLink, Lecture_idLecture);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n  .delete(profAuth, async (req, res) => {\r\n    const { title } = req.body;\r\n    console.log(\"lecture content DELETE call\");\r\n    // await DB.deleteLecture(title);\r\n    res.redirect(\".\");\r\n  })\r\n  .patch(profAuth, async (req, res) => {\r\n    const { ContentLink, Lecture_idLecture } = req.body;\r\n    console.log(\"lecture content PATCH call\");\r\n    // await DB.updateLecture(ContentLink, Lecture_idLecture);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n}","import type { Express } from 'express';\r\nimport DatabaseHandler from '../db';\r\nimport auth, { profAuth } from '../helpers/auth';\r\nimport { toMySqlDate } from '../helpers/dateToMySql';\r\n\r\nexport const quizRoutes = (app: Express, DB: DatabaseHandler) => {\r\n  app.route(\"/quizzes\")\r\n  .get(async (req, res) => {\r\n    return res.send(await DB.getQuizzes()).end();\r\n  })\r\n  .post(profAuth, async (req, res) => {\r\n    const { Title, StartTime, EndTime, title } = req.body;\r\n    await DB.createQuiz(Title, toMySqlDate(StartTime), toMySqlDate(EndTime), await DB.getLectureId(title));\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n  .delete(profAuth, async (req, res) => {\r\n    const { Title } = req.body;\r\n    await DB.deleteQuiz(Title);\r\n    res.redirect(\".\");\r\n  })\r\n  .patch(profAuth, async (req, res) => {\r\n    const { Title, StartTime, EndTime } = req.body;\r\n    await DB.updateQuiz(Title, toMySqlDate(StartTime), toMySqlDate(EndTime));\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n}","import sirv from \"sirv\";\r\nimport express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nimport session from \"express-session\";\r\nimport DatabaseHandler from \"./db\";\r\nimport roleNameToId from \"./helpers/roleNameToId\";\r\nimport auth, { profAuth } from \"./helpers/auth\";\r\nimport { roleRoutes } from \"./routes/roles\";\r\nimport { courseRoutes } from \"./routes/courses\";\r\nimport { lectureRoutes } from \"./routes/lectures\";\r\nimport { contentRoutes } from \"./routes/content\";\r\nimport { quizRoutes } from \"./routes/quizzes\";\r\n\r\nconst DB = new DatabaseHandler();\r\n\r\nconst app = express();\r\n\r\napp.use(session({\r\n  secret: \"lightbulb\", \r\n  cookie: { maxAge: 3600000 },\r\n  saveUninitialized: true,\r\n  resave: true\r\n}))\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// this is how you'd go about creating new API endpoints and\r\n// sending data back to the client\r\n// more documentation here: http://expressjs.com/en/guide/routing.html#route-handlers\r\napp.route(\"/users\")\r\n  .get(auth, async (req, res) => {\r\n    return res.send(await DB.getUsers()).end();\r\n  })\r\n  .post(async (req, res) => {\r\n    const {username, password, role, FirstName, LastName, Email} = req.body;\r\n    console.log(req.body);\r\n    await DB.addUser(username, password, roleNameToId(role), FirstName, LastName, Email);\r\n    if (req.session[\"role\"] == \"admin\") {\r\n      res.redirect(\".\");\r\n    } else {\r\n      res.redirect(\"/login\");\r\n    }\r\n  })\r\n  .delete(auth, async (req, res) => {\r\n    console.log(req.body);\r\n    const {username} = req.body;\r\n    await DB.deleteUser(username);\r\n    res.redirect(\"/index\");\r\n  })\r\n  .patch(auth, async (req, res) => {\r\n    const { oldUsername, username, FirstName, LastName, Roles_idRoles, Email } = req.body;\r\n    // console.log(\"this is where updateUser method(s) would go\");\r\n    // console.log(\"this may help implement it: https://stackoverflow.com/questions/25683760/how-to-dynamically-generate-mysql-update-statement-based-on-defined-variables-fr\");\r\n    if (FirstName?.length) await DB.updateUserFirstName(oldUsername, FirstName)\r\n    if (LastName?.length) await DB.updateUserLastName(oldUsername, LastName)\r\n    if (Email?.length) await DB.updateUserEmail(oldUsername, Email)\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n\r\napp.get(\"/admin\", auth)\r\napp.get(\"/instructor\", profAuth);\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n  const { psw, uname } = req.body;\r\n  const users = await DB.getUsers();\r\n  for (const user of users as any) {\r\n    if (user.password == psw && user.username == uname) {\r\n      switch(user.Roles_idRoles) {\r\n        case 1:\r\n          req.session[\"role\"] = \"admin\";\r\n          res.redirect(\"/admin\");\r\n          return;\r\n        case 2:\r\n          req.session[\"role\"] = \"instructor\";\r\n          res.redirect(\"/instructor\");\r\n          return;\r\n        default:\r\n          res.redirect(\"/index\");\r\n      }\r\n    }\r\n  }\r\n  res.redirect(\"/login\");\r\n})\r\n\r\napp.route(\"/groups\")\r\n  .post(auth, async (req, res) => {\r\n    const { Name, Description } = req.body;\r\n    await DB.createDiscussionGroup(Name, Description);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n  .delete(auth, async (req, res) => {\r\n    const { Name } = req.body;\r\n    await DB.deleteGroup(Name);\r\n    res.redirect(\".\");\r\n  })\r\n  .get(auth, async (req, res) => {\r\n    return res.send(await DB.getGroups()).end();\r\n  })\r\n  .patch(auth, async (req, res) => {\r\n    const { newGroupName, oldGroupName } = req.body;\r\n    await DB.updateGroupName(newGroupName, oldGroupName);\r\n    res.status(200);\r\n    res.redirect(\".\");\r\n  })\r\n\r\ncourseRoutes(app, DB);\r\nroleRoutes(app, DB);\r\nlectureRoutes(app, DB);\r\ncontentRoutes(app, DB);\r\nquizRoutes(app, DB);\r\n\r\n// app.route(\"/discussions\")\r\n//   .get(auth, async (req, res) => {\r\n//     return res.send(await DB.getDiscussions()).end();\r\n//   })\r\n//   .post(auth, async (req, res) => {\r\n//     const { title } = req.body;\r\n//     await DB.addDiscussion(title);\r\n//     res.redirect(\"/admin\");\r\n//   })\r\n\r\napp.post(\"/linkUserToSomething\", auth, (req, res) => {\r\n  // TODO: implement this lmao\r\n  res.redirect(\"/admin\");\r\n})\r\n// loads the static assets (index.html, login.html, etc) for us\r\nconst assets = sirv('public', {extensions:['html', 'htm', \".map\"]});\r\napp.use(assets);\r\n\r\napp.listen(5000, () => {\r\n  console.log(\"ready on https://localhost:5000\");\r\n})\r\n"],"names":["mysql.createPool","express","session","bodyParser","sirv"],"mappings":"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"}